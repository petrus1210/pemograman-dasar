{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyObpfB++6lxva09FHtOdoWX",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/petrus1210/pemograman-dasar/blob/main/TUGAS%20PERTEMUAN%202\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "KGnjZCtyWyLK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2b622bdf-cc8e-4dd3-c848-0006c601ea63"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "firstname: petrus\n",
            "lastname: randanu\n",
            "age 20\n",
            "isMarried False\n"
          ]
        }
      ],
      "source": [
        "#TODO:\n",
        "\n",
        "firstname = 'petrus'\n",
        "\n",
        "lastname = 'randanu'\n",
        "\n",
        "age = 20\n",
        "\n",
        "isMarried = False\n",
        "\n",
        "print(\"firstname:\", firstname)\n",
        "\n",
        "print(\"lastname:\", lastname)\n",
        "\n",
        "print(\"age\", age)\n",
        "\n",
        "print(\"isMarried\", isMarried)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TODO\n",
        "\n",
        "data_diri = {'firstname': 'petrus', 'lastname': 'randanu', 'age': 20, 'isMarried': False}\n",
        "\n",
        "print(data_diri)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wX88BhaNXZxe",
        "outputId": "ffe6d3df-8b86-46de-be25-faf992255c13"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'firstname': 'petrus', 'lastname': 'randanu', 'age': 20, 'isMarried': False}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "inspeksi = [\"pemahaman terhadap rencana dan desain\", \"ketersediaan bahan dan peralatan\", \"pengawasan pekerjaan\",\"kualitas konstruksi\",\"keselamatan kerja\",\"koordinasi dengan pemilihan proyek\"]\n",
        "\n",
        "print(\"daftar inspeksi proyek:\")\n",
        "\n",
        "for i in range(len(inspeksi)):\n",
        "    print(f\"{i+1}. {inspeksi[i]}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XALzBI5cYGWx",
        "outputId": "114d89c0-ffad-4f7a-8248-91dfc2150af0"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "daftar inspeksi proyek:\n",
            "1. pemahaman terhadap rencana dan desain\n",
            "2. ketersediaan bahan dan peralatan\n",
            "3. pengawasan pekerjaan\n",
            "4. kualitas konstruksi\n",
            "5. keselamatan kerja\n",
            "6. koordinasi dengan pemilihan proyek\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# waktu datang\n",
        "\n",
        "# Assuming 'startime' should be a variable or a function call\n",
        "# startime(\"HH\": 9, \"m\": 23, \"55\": 57) # This syntax is incorrect\n",
        "\n",
        "# waktu pulang\n",
        "\n",
        "# Assuming 'endtime' should be a variable or a function call\n",
        "# endtime (\"HH\": 15, \"am\": 25, \"ss\": 43) # This syntax is incorrect\n",
        "\n",
        "# You need to assign values to startime and endtime or define functions with these names\n",
        "startime = \"9:23:57\" # Example of assigning a string\n",
        "endtime = \"15:25:43\" # Example of assigning a string\n",
        "\n",
        "print(\"waktu datang :\", startime)\n",
        "\n",
        "print(\"waktu pulang:\", endtime)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iN0N1fxZZB54",
        "outputId": "36cd9aa2-e98f-47eb-9799-6ffc732f2995"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "waktu datang : 9:23:57\n",
            "waktu pulang: 15:25:43\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#STUDI KELAS PENGGABUNGAN DAN ANALISIS KATALOG PRODUK\n",
        "\n",
        "katalog_A = {\"oli\", \"ban\", \"lampu motor\", \"kampas rem\"}\n",
        "\n",
        "katalog_B = {\"piston\", \"oli\", \"ban\", \"bearing\"}\n",
        "\n",
        "produk_diskon = {\"oli\", \"ban\", \"noken as\"} # Assuming produk_diskon is a set\n",
        "\n",
        "#gabungkan katalog_A dan katalog_B menjadi satu set unik katalog_lengkap katalog_A.union(katalog_B)\n",
        "katalog_lengkap = katalog_A.union(katalog_B)\n",
        "\n",
        "#cari produk mana saja dari katalog_lengkap dan produk_diskon produk_promo_aktif = katalog_lengkap.intersection(set(produk_diskon))\n",
        "produk_promo_aktif = katalog_lengkap.intersection(produk_diskon)\n",
        "\n",
        "#tampilkan hasil\n",
        "print(\"katalog lengkap:\", katalog_lengkap)\n",
        "print(\"produk diskon:\", produk_diskon)\n",
        "print(\"produk promo aktif:\", produk_promo_aktif)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wBTnliW-ZfnR",
        "outputId": "15bb853a-e5f5-4744-a60b-0d8ee3f98fb4"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "katalog lengkap: {'lampu motor', 'kampas rem', 'ban', 'bearing', 'piston', 'oli'}\n",
            "produk diskon: {'noken as', 'ban', 'oli'}\n",
            "produk promo aktif: {'ban', 'oli'}\n"
          ]
        }
      ]
    }
  ]
}